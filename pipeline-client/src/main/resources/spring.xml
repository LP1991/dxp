<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xmlns:context="http://www.springframework.org/schema/context" xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	   xmlns:jee="http://www.springframework.org/schema/jee" xmlns:tx="http://www.springframework.org/schema/tx"
	   xmlns:p="http://www.springframework.org/schema/p"
	   xmlns:util="http://www.springframework.org/schema/util"
	   xmlns:task="http://www.springframework.org/schema/task"
	   xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-4.0.xsd
		http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-4.0.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd
		http://www.springframework.org/schema/task
		http://www.springframework.org/schema/task/spring-task-4.0.xsd"
	   default-lazy-init="true">
	
	
	<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="fileEncoding" value="utf-8" />
		<property name="locations">
			<list>
				<value>classpath*:hlframe.properties</value>
			</list>
		</property>
	</bean>
	<context:component-scan base-package="com.hlframe" />
	<!-- ********************************* part 1 :for datasource ********************************* -->

	<!--<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"  destroy-method="close">-->
	    <!--<property name="driverClass" value="${xxl.job.db.driverClass}" />-->
	    <!--<property name="jdbcUrl" value="${xxl.job.db.url}" />-->
	    <!--<property name="user" value="${xxl.job.db.user}" />-->
	    <!--<property name="password" value="${xxl.job.db.password}" />-->
	    <!--<property name="initialPoolSize" value="3" />  -->
	    <!--<property name="minPoolSize" value="2" />  -->
	    <!--<property name="maxPoolSize" value="10" />  -->
	    <!--<property name="maxIdleTime" value="60" />-->
	    <!--<property name="acquireRetryDelay" value="1000" />-->
	    <!--<property name="acquireRetryAttempts" value="10" />-->
	    <!--<property name="preferredTestQuery" value="SELECT 1" />-->
	<!--</bean>-->

	<!-- 数据源配置, 使用 BoneCP 数据库连接池 -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
		<!-- 数据源驱动类可不写，Druid默认会自动根据URL识别DriverClass -->
		<property name="driverClassName" value="${jdbc.driver}" />

		<!-- 基本属性 url、user、password -->
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />

		<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize" value="${jdbc.pool.init}" />
		<property name="minIdle" value="${jdbc.pool.minIdle}" />
		<property name="maxActive" value="${jdbc.pool.maxActive}" />

		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="60000" />

		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />

		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="300000" />

		<property name="validationQuery" value="${jdbc.testSql}" />
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />

		<!-- 打开PSCache，并且指定每个连接上PSCache的大小（Oracle使用）
		<property name="poolPreparedStatements" value="true" />
		<property name="maxPoolPreparedStatementPerConnectionSize" value="20" /> -->

		<!-- 配置监控统计拦截的filters
	    <property name="filters" value="stat" />  -->
	</bean>
	
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="typeAliasesPackage" value="com.hlframe.data.entity"/>
		<property name="typeAliasesSuperType" value="com.hlframe.client.data.persistence.BaseEntity"/>
		<property name="mapperLocations" value="classpath:/mappings/**/*.xml"/>
		<property name="configLocation" value="classpath:/mybatis-config.xml"></property>
	</bean>

	<!-- 扫描basePackage下所有以@MyBatisDao注解的接口 -->
	<bean id="mapperScannerConfigurer" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
		<property name="basePackage" value="com.hlframe"/>
		<property name="annotationClass" value="com.hlframe.modules.client.data.persistence.annotation.MyBatisDao"/>
	</bean>

    <!-- scope must be "prototype" when junit -->
    <bean id="sqlSessionTemplate"  class="org.mybatis.spring.SqlSessionTemplate" scope="prototype">  
          <constructor-arg index="0" ref="sqlSessionFactory" />  
    </bean> 
    
	<!-- ********************************* part 2 :for tx ********************************* -->

    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
      
	<tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true"/>

	<!-- 配置02、执行器 -->
	<bean id="jobExecutor" class="com.hlframe.dxp.core.executor.JobExecutor" init-method="start" destroy-method="destroy" >
		<!-- 执行器IP[选填]，为空则自动获取 -->
		<property name="ip" value="${job.executor.ip}" />
		<!-- 执行器端口号[必须] -->
		<property name="port" value="${job.executor.port}" />
		<!-- 执行器AppName[选填]，为空则关闭自动注册 -->
		<property name="appName" value="${job.executor.appname}" />
		<!-- 执行器注册中心地址[选填]，为空则关闭自动注册 -->
		<property name="adminAddresses" value="${job.manager.addresses}" />
		<!-- 执行器日志路径[必填] -->
		<property name="logPath" value="${job.executor.logpath}" />
	</bean>
</beans>